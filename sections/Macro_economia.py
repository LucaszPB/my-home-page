# =========================================================
# C√≥digo de Macroeconomia e Dados
# =========================================================

import os  # Biblioteca padr√£o do Python para manipula√ß√£o de caminhos e diret√≥rios
import pandas as pd  # Pandas: principal biblioteca para manipula√ß√£o e an√°lise de dados em formato tabular (DataFrames)
import numpy as np  # Numpy: biblioteca para c√°lculos num√©ricos eficientes (vetores, matrizes, fun√ß√µes matem√°ticas)
import streamlit as st  # Streamlit: framework para criar aplica√ß√µes web interativas de forma simples e r√°pida (dashboard/data apps)
import plotly.express as px  # Plotly Express: m√≥dulo simplificado do Plotly para criar gr√°ficos interativos com poucas linhas de c√≥digo
import plotly.graph_objects as go  # Plotly Graph Objects: m√≥dulo mais detalhado/flex√≠vel do Plotly, que permite customizar gr√°ficos interativos em maior profundidade

# Importa bibliotecas estat√≠sticas espec√≠ficas para s√©ries temporais
from statsmodels.tsa.stattools import adfuller  # Teste de estacionariedade ADF
from statsmodels.tsa.api import VAR             # Modelo VAR
from statsmodels.tsa.vector_ar.vecm import coint_johansen, VECM  # Cointegra√ß√£o e modelo VECM


# ======= CONFIG =======
# AVISO: Se sua estrutura de projeto for diferente, estou saindo da estrutura.
DATA_DIR = os.path.join("assets", "macro_br")
MERGED_FILE = os.path.join(DATA_DIR, "merged_macro_br.csv")
# ======================

# Configura√ß√£o da p√°gina Streamlit:
# - page_title: t√≠tulo da aba do navegador
# - layout="wide": usa layout mais largo para aproveitar a tela
st.set_page_config(page_title="Macro Brasil ‚Äî VAR & VECM", layout="wide")
st.title("üìà Macro Brasil ‚Äî An√°lise r√°pida (VAR & VECM)")

# Texto explicativo curto sobre o que a p√°gina faz.
# Aqui √© apenas um markdown com instru√ß√µes e descri√ß√£o para o usu√°rio.
st.markdown(
    """
**O que esta p√°gina faz?**  
- Explicada os indicadores macroecon√¥micos diretos do banco mundial ( Indicadores v'ao estar com bases globais e n'ao bases nacionais devido a API ) e traz umm gr√°fico com o hist√≥rico   
- Mostra um **gr√°fico de linha** do indicador principal nos.  
- Executa **ADF**, **VAR** e **VECM** (decide com base em cointegra√ß√£o).  
- Exibe **c√≥digos** (ocultos em expanders), **gr√°ficos** e **conclus√µes**.
    """
)

# Verifica se o arquivo merged existe. Se n√£o existir, exibe erro e interrompe a execu√ß√£o.
# Isso evita erros posteriores ao tentar ler um arquivo inexistente.
if not os.path.exists(MERGED_FILE):
    st.error(
        f"Arquivo n√£o encontrado: `{MERGED_FILE}`.\n\n"
    )
    st.stop()

# Carrega o CSV "merged" que cont√©m todos os indicadores macro necess√°rios.
# Espera-se que o CSV tenha pelo menos a coluna "year" e v√°rias colunas de s√©ries.
dfm = pd.read_csv(MERGED_FILE)

# Valida√ß√£o: o CSV deve conter a coluna 'year'. Se n√£o tiver, mostra erro e para a execu√ß√£o.
if "year" not in dfm.columns:
    st.error("CSV merged n√£o possui coluna 'year'. Verifique o arquivo.")
    st.stop()

# ===== Ajustes b√°sicos no dataframe =====
# - copia para evitar alterar o original
# - ordena por year (importante para s√©ries temporais)
# - remove colunas totalmente vazias
dfm = dfm.copy()
dfm = dfm.sort_values("year")
dfm = dfm.dropna(how="all", axis=1)  # remove colunas totalmente vazias

# Lista de indicadores dispon√≠veis (todas as colunas menos "year").
# Usada para popular o selectbox que escolhe o indicador principal.
indicadores_disponiveis = [c for c in dfm.columns if c != "year"]

# Valida√ß√£o: precisamos de ao menos 2 indicadores para modelagem VAR/VECM.
# Se tiver menos, informamos o usu√°rio e paramos a execu√ß√£o.
if len(indicadores_disponiveis) < 2:
    st.error("S√£o necess√°rios pelo menos 2 indicadores no merged para modelar. Baixe mais s√©ries.")
    st.stop()

# Pequeno divisor visual na interface Streamlit.
st.divider()

st.subheader("***An√°lise de indicadores macroecon√¥micos***")

# Caixa de sele√ß√£o para o usu√°rio escolher qual indicador ser√° mostrado
# como "indicador principal" (gr√°fico + explica√ß√£o).
# index=0 define o primeiro item como selecionado por padr√£o.
indicador_principal = st.selectbox("üìå Indicador principal (gr√°fico + explica√ß√£o):", indicadores_disponiveis, index=0)


# Explica√ß√µes mais elaboradas dos indicadores macroeconomicos 
explicacoes = {
  'Infla√ß√£o (CPI, % a.a.)': """Mostra quanto, em m√©dia, os pre√ßos pagos pelas fam√≠lias subiram nos √∫ltimos 12 meses.
- Origem do n√∫mero: Banco Mundial (API: "FP.CPI.TOTL.ZG")
- Por que importa? Se os pre√ßos sobem mais r√°pido que o sal√°rio, o poder de compra cai. Infla√ß√£o baixa e previs√≠vel facilita planejar compras, contratos e investimentos.
- De onde vem: choques de oferta (energia, alimentos, c√¢mbio) e/ou demanda aquecida (cr√©dito, renda, emprego). Itens administrados e alimenta√ß√£o costumam gerar oscila√ß√µes.
- Pol√≠tica: infla√ß√£o alta e persistente tende a levar o Banco Central a subir juros; infla√ß√£o ancorada abre espa√ßo para cortes.
- Leitura pr√°tica: acompanhe aluguel, mercado (feira/supermercado) e contas de servi√ßos ‚Äî s√£o bons term√¥metros do seu custo de vida.
- Exemplo do dia a dia: se g√°s, arroz e luz sobem ~8% no ano e seu sal√°rio aumenta 5%, o or√ßamento aperta: voc√™ compra menos com o mesmo dinheiro.""",

  'PIB real ‚Äî crescimento (% a.a.)': """Varia√ß√£o do total produzido pelo pa√≠s, j√° descontada a infla√ß√£o (crescimento ‚Äúde verdade‚Äù).
- Origem do n√∫mero: Banco Mundial (API: "NY.GDP.MKTP.KD.ZG")
- O que indica: acima de 0% = economia expandindo; abaixo de 0% = retraindo (sinal de recess√£o se persiste).
- Motores do PIB: consumo das fam√≠lias, investimento das empresas, gasto p√∫blico e saldo externo (exporta√ß√µes ‚Äì importa√ß√µes).
- Por que importa: orienta emprego, renda, lucros, arrecada√ß√£o e a percep√ß√£o de risco do pa√≠s.
- Uso r√°pido: combine com infla√ß√£o e juros para ler o ciclo (aquecendo, est√°vel ou esfriando) e ajustar decis√µes de cr√©dito e investimento.
- Exemplo do dia a dia: PIB em alta costuma trazer mais vagas, obras e vendas; em baixa, com√©rcio mais fraco e contrata√ß√µes lentas.""",

  'Desemprego (% for√ßa de trabalho)': """Parcela de pessoas na for√ßa de trabalho que querem e procuram emprego, mas ainda n√£o encontraram.
- Origem do n√∫mero: Banco Mundial (API: "SL.UEM.TOTL.ZS")
- Tipos: friccional (troca de emprego), estrutural (descompasso de qualifica√ß√£o/regi√£o) e c√≠clico (atividade fraca).
- Aten√ß√£o: desalentados (quem desistiu de procurar) n√£o entram na taxa; subocupa√ß√£o e informalidade podem mascarar fragilidades.
- Rela√ß√£o com o PIB: crescimento reduz desemprego com defasagem; queda muito forte do desemprego pode pressionar sal√°rios e, depois, pre√ßos.
- Leitura pr√°tica: olhe tamb√©m participa√ß√£o na for√ßa de trabalho e subutiliza√ß√£o para ter um retrato completo do mercado de trabalho.
- Exemplo do dia a dia: sua amiga pede demiss√£o e passa 2 meses procurando ‚Äî enquanto busca, ela entra na estat√≠stica de desemprego.""",

  'Conta Corrente (% do PIB)': """Placar das trocas do pa√≠s com o exterior: bens e servi√ßos, rendas (juros/lucros) e transfer√™ncias.
- Origem do n√∫mero: Banco Mundial (API: "BN.CAB.XOKA.GD.ZS")
- Leitura: d√©ficit = pa√≠s gasta mais do que recebe e precisa de financiamento externo; super√°vit = entra mais do que sai.
- Risco: d√©ficits altos e persistentes, cobertos por d√≠vida de curto prazo, aumentam a vulnerabilidade a choques e a volatilidade cambial.
- Qualidade do financiamento: IED (f√°bricas/projetos) √© mais est√°vel que d√≠vida de curto prazo e tende a apoiar produtividade.
- Efeito pr√°tico: contas externas melhores aliviam o c√¢mbio; piores tendem a pressionar d√≥lar, turismo e eletr√¥nicos importados.
- Exemplo do dia a dia: como uma fam√≠lia ‚Äî se gasta mais do que ganha, recorre a cr√©dito; se sobra, poupa e investe com folga.""",

  'Juros reais (% a.a.)': """Taxa de juros ap√≥s descontar a infla√ß√£o (aprox.: juros nominais ‚Äì infla√ß√£o esperada/realizada).
- Origem do n√∫mero: Banco Mundial (API: "FR.INR.RINR")
- Por que importa? √â o ‚Äúcusto verdadeiro‚Äù do cr√©dito e o ganho real de quem poupa/investe; baliza decis√µes de financiamento e aloca√ß√£o.
- Pol√≠tica: principal alavanca do Banco Central; acima do juro ‚Äúneutro‚Äù esfria a economia, abaixo estimula atividade e cr√©dito.
- Medi√ß√£o: ex-ante (usa expectativas) ajuda a decidir hoje; ex-post (usa infla√ß√£o realizada) descreve o que passou.
- Regra pr√°tica: juros reais altos encarecem financiamentos ao longo do tempo; mais baixos aliviam o or√ßamento e favorecem investimentos produtivos.
- Exemplo do dia a dia: empr√©stimo a 10% a.a. com infla√ß√£o de 6% ‚Üí juro real ~4% ‚Äî o saldo devedor ‚Äúcresce‚Äù em termos reais e pesa no bolso m√™s a m√™s.
- OBS: O n√∫mero da taxa de juros vinda da API n√£o √© a mesma da SELIC em quest√£o de valor absoluto, mas a diferen√ßa entre elas √© praticamente constante ao longo do tempo. Portanto, para an√°lises de s√©ries temporais e modelos VAR/VECM, essa diferen√ßa constante n√£o afeta os resultados."""
}


with st.expander("‚ÑπÔ∏è Sobre o indicador selecionado", expanded=True):
    # Exibe um resumo explicativo do indicador selecionado pelo usu√°rio.
    # Usa o dicion√°rio 'explicacoes' definido no topo do arquivo para mostrar
    # uma descri√ß√£o j√° pronta, ou um texto gen√©rico se n√£o houver entrada.
    st.markdown(f"**{indicador_principal}** ‚Äî {explicacoes.get(indicador_principal, 'Indicador macroecon√¥mico do Banco Mundial (s√©rie anual).')}")

# ===== Gr√°fico - Hist√≥rico =====
st.subheader("üìä Evolu√ß√£o (hist√≥rico completo)")

try:
    # Seleciona apenas as colunas relevantes: ano e o indicador escolhido.
    # dropna() evita anos sem valor para o indicador.
    gdf = dfm[["year", indicador_principal]].dropna().copy()

    if gdf.empty:
        # Caso n√£o existam observa√ß√µes v√°lidas, avisa o usu√°rio.
        st.warning("Sem dados suficientes para este indicador.")
    else:
        # Garantir que o eixo x (year) seja apresentado como string
        # para que o plotly trate cada ano como r√≥tulo categ√≥rico e n√£o
        # como n√∫mero/escala cont√≠nua (melhor leitura para s√©ries anuais).
        try:
            # Primeiro tentamos converter para num√©rico e depois para inteiro,
            # assim evitamos r√≥tulos como '2000.0' caso o CSV venha com floats.
            gdf["year"] = pd.to_numeric(gdf["year"]).astype(int).astype(str)
        except Exception:
            # Se falhar (ex.: formatos estranhos), garantimos ao menos string.
            gdf["year"] = gdf["year"].astype(str)

        # Cria uma coluna auxiliar de r√≥tulos, formatando valores com 2 casas
        # decimais e sufixo '%' para mostrar diretamente sobre os pontos.
        # Isso facilita leitura r√°pida sem precisar abrir hover.
        gdf["__label"] = gdf[indicador_principal].map(lambda v: f"{float(v):.2f}%")

        # Constr√≥i o gr√°fico de linha com markers usando plotly express.
        # plotly express cria uma figura pronta e f√°cil de customizar depois.
        fig = px.line(
            gdf,
            x="year",
            y=indicador_principal,
            markers=True,
        )

        # Ajustes nos tra√ßos:
        # - text: mostra o r√≥tulo acima de cada ponto (textposition)
        # - hovertemplate: controla o conte√∫do do tooltip com 2 casas decimais
        #   e elimina o texto extra padr√£o (<extra></extra>).
        fig.update_traces(
            text=gdf["__label"],
            textposition="top center",
            hovertemplate=f"%{{x}}<br>{indicador_principal}: %{{y:.2f}}%<extra></extra>",
        )

        # Layout: t√≠tulos de eixos, formato do eixo y com sufixo '%' e margens.
        # tickformat e ticksuffix ajudam a exibir valores percentuais corretamente.
        fig.update_layout(
            xaxis_title="Ano",
            yaxis_title=indicador_principal,
            yaxis=dict(tickformat=".2f", ticksuffix="%"),
            margin=dict(t=20, b=40),
        )

        # Renderiza o gr√°fico no Streamlit, ajustando √† largura do cont√™iner.
        st.plotly_chart(fig, use_container_width=True)

        # Fonte e per√≠odo ‚Äî informa√ß√£o adicional para o usu√°rio.
        st.caption("Fonte: API World Bank. 2000-2024.")
except Exception as e:
    # Em caso de erro em qualquer etapa do plot, mostra uma mensagem amig√°vel
    # com a exce√ß√£o para facilitar debug.
    st.warning(f"N√£o foi poss√≠vel plotar o gr√°fico: {e}")

# Insere uma linha divis√≥ria horizontal na p√°gina do Streamlit
st.markdown("---")

# =============================================================
# Inicio An√°lise de s√©ries temporais VAR e VECM
# =============================================================


# Define o t√≠tulo principal da se√ß√£o com um emoji e texto descritivo
st.header("üìö An√°lise de s√©ries temporais VAR e VECM")

# Cria um bloco expans√≠vel (accordion) para explicar o teste ADF
with st.expander("üìâ ADF ‚Äî Teste de Raiz Unit√°ria (estacionariedade)", expanded=False):
        # Texto em Markdown explicando o que √© o teste ADF,
        # sua import√¢ncia, como interpretar os resultados e exemplos pr√°ticos
        st.markdown(
            """
**O que √©?**  
O **ADF (Augmented Dickey‚ÄìFuller)** √© um teste estat√≠stico para verificar se uma s√©rie **√© estacion√°ria** (isto √©, se n√£o ‚Äúderiva‚Äù ao longo do tempo).  
Em termos simples: ele checa se a s√©rie ‚Äútem mem√≥ria de tend√™ncia‚Äù ou se oscila em torno de um n√≠vel m√©dio est√°vel.

**Por que isso importa?**  
Modelos como VAR e VECM **precisam** saber se as s√©ries s√£o estacion√°rias. Se n√£o forem, √© comum **diferenciar** (‚àÜ) ou usar **VECM** quando h√° cointegra√ß√£o.

**Como interpretar (regra pr√°tica):**  
- **p-valor < 0,05** ‚Üí rejeita a hip√≥tese de raiz unit√°ria ‚Üí **s√©rie estacion√°ria** ‚úÖ  
- **p-valor ‚â• 0,05** ‚Üí n√£o rejeita a hip√≥tese de raiz unit√°ria ‚Üí **prov√°vel n√£o estacion√°ria** ‚ùå

**Exemplo do dia a dia:**  
Pense no **pre√ßo de um im√≥vel** na sua cidade: ao longo dos anos ele tende a **subir** (tend√™ncia). J√° a **varia√ß√£o mensal** (alta/queda de um m√™s para o outro) costuma oscilar perto de zero. O n√≠vel de pre√ßo √© **n√£o estacion√°rio**; a **varia√ß√£o** pode ser **estacion√°ria**.

**Passo a passo (pr√°tico):**  
1) Plote a s√©rie e avalie tend√™ncia/sazonalidade.  
2) Rode o ADF na s√©rie em n√≠vel.  
3) Se n√£o for estacion√°ria, teste a **primeira diferen√ßa** (‚àÜ).  
4) Guarde o resultado para decidir entre **VAR em diferen√ßas** ou **VECM** (se houver cointegra√ß√£o).
"""
        )

# Cria outro bloco expans√≠vel para explicar o modelo VAR
with st.expander("üîó VAR ‚Äî Vetores Autorregressivos (s√©ries estacion√°rias)", expanded=False):
        # Explica√ß√£o detalhada sobre o modelo VAR em linguagem simples
        st.markdown(
            """
**O que √©?**  
O **VAR** modela v√°rias s√©ries **ao mesmo tempo**, permitindo que **cada vari√°vel** dependa de **defasagens de si mesma e das outras**. √â √≥timo para entender **din√¢micas e intera√ß√µes** (ex.: infla√ß√£o ‚Üî juros ‚Üî atividade).

**Quando usar?**  
- S√©ries **estacion√°rias** (em n√≠vel ou em diferen√ßas).  
- Voc√™ quer **prever**, **medir impactos** (respostas a choques/IRFs) e **analisar causalidade temporal** (Granger).

**Para que serve (na pr√°tica):**  
- **Previs√µes multivariadas**.  
- **IRF** (Impulse Response Function): ‚Äúse os juros sobem 1 p.p. hoje, como a infla√ß√£o e o PIB reagem nos pr√≥ximos meses?‚Äù  
- **Decomposi√ß√£o da vari√¢ncia**: ‚Äúqual vari√°vel explica mais a incerteza da infla√ß√£o?‚Äù

**Exemplo do dia a dia:**  
√â como observar **tr√¢nsito em cruzamentos**: o fluxo de uma avenida (juros) afeta o de outra (infla√ß√£o), e vice-versa. O VAR aprende esses **efeitos cruzados ao longo do tempo**.

**Passo a passo (pr√°tico):**  
1) Garanta estacionariedade (ADF).  
2) Escolha **lags** (AIC/BIC).  
3) Ajuste o VAR e **valide res√≠duos** (autocorrela√ß√£o, normalidade).  
4) Gere **IRFs** e **previs√µes**; interprete economicamente.
"""
        )

# Cria outro bloco expans√≠vel para explicar o modelo VECM
with st.expander("‚öñÔ∏è VECM ‚Äî VAR com Corre√ß√£o de Erro (cointegra√ß√£o)", expanded=False):
        # Explica√ß√£o em markdown sobre quando usar VECM e sua l√≥gica
        st.markdown(
            """
**O que √©?**  
O **VECM** √© um VAR ‚Äúespecial‚Äù para s√©ries **n√£o estacion√°rias** que possuem **relacionamento de longo prazo** (cointegra√ß√£o).  
Ele separa **curto prazo** (diferen√ßas) de **longo prazo** (termo de corre√ß√£o de erro que ‚Äúpuxa‚Äù as s√©ries de volta ao equil√≠brio).

**Quando usar?**  
- S√©ries **I(1)** (n√£o estacion√°rias em n√≠vel, mas estacion√°rias na primeira diferen√ßa).  
- Existe **cointegra√ß√£o** (teste de Johansen indica pelo menos 1 vetor cointegrante).

**Para que serve (na pr√°tica):**  
- Modelar sistemas onde h√° **equil√≠brio de longo prazo** (ex.: juros reais, infla√ß√£o e c√¢mbio; pre√ßos e custos; renda e consumo).  
- Entender **ajustes**: quem ‚Äúcorrige‚Äù o desvio e **com que velocidade**.

**Exemplo do dia a dia:**  
Pense em dois amigos que caminham juntos: cada um pode se adiantar ou atrasar (curto prazo), mas como est√£o **amarrados por uma conversa**, naturalmente **voltarem a ficar lado a lado** (longo prazo). O VECM modela essa ‚Äúamarra‚Äù.

**Passo a passo (pr√°tico):**  
1) Mostre que as s√©ries s√£o **I(1)** (ADF nas s√©ries e nas diferen√ßas).  
2) Rode **Johansen** para testar **cointegra√ß√£o** e encontrar o(s) vetor(es) de longo prazo.  
3) Ajuste o **VECM** (escolha de lags + rank).  
4) Analise **coeficientes de ajuste**, **IRFs**, **previs√µes** e **diagn√≥sticos**.
"""
        )

# Cria um √∫ltimo bloco expans√≠vel com o "roteiro" completo de an√°lise
with st.expander("üß≠ Roteiro de an√°lise (do zero ao resultado)", expanded=False):
        # Passo a passo resumido para an√°lise pr√°tica
        st.markdown(
            """
**1) Explora√ß√£o inicial**  
- Plotar s√©ries, olhar tend√™ncia/sazonalidade, checar outliers e data gaps.

**2) Testes de estacionariedade (ADF)**  
- Em **n√≠vel** e **primeira diferen√ßa**.  
- Decidir: **VAR** (se estacion√°ria) ou **VECM** (se I(1) com cointegra√ß√£o).

**3) Cointegra√ß√£o (se necess√°rio)**  
- Teste de **Johansen** ‚Üí defina **rank** (n¬∫ de rela√ß√µes de longo prazo).

**4) Escolha de defasagens (lags)**  
- Usar **AIC/BIC/HQIC** para selecionar lags √≥timos.

**5) Ajuste do modelo**  
- **VAR** (em n√≠veis se estacion√°rio; em diferen√ßas se n√£o).  
- **VECM** (se I(1) + cointegra√ß√£o).  

**6) Diagn√≥sticos**  
- Res√≠duos (autocorrela√ß√£o/heteroscedasticidade).  
- Estabilidade (ra√≠zes do polin√¥mio).  

**7) Interpreta√ß√£o & uso**  
- **IRFs** (respostas a choques) e **decomposi√ß√£o da vari√¢ncia**.  
- **Previs√µes** (curto prazo) com intervalos.  
- **Hist√≥rias econ√¥micas**: conecte achados aos fatos (pol√≠tica monet√°ria, choques externos, etc.).
"""
        )

# Cria um subt√≠tulo que provavelmente ser√° seguido de c√≥digo de teste ADF aplicado a dados reais
st.subheader("üß™ Teste de Estacionariedade (ADF)")

# Fun√ß√£o para rodar o teste ADF (Augmented Dickey-Fuller) em uma s√©rie temporal
def run_adf_show(x: pd.Series):
    # Converte os valores da s√©rie para num√©rico (se houver strings, converte ou descarta),
    # e remove valores ausentes (NaN)
    x = pd.to_numeric(x, errors="coerce").dropna()
    try:
        # Executa o teste ADF com crit√©rio de sele√ß√£o de defasagens baseado no AIC
        # O adfuller retorna: estat√≠stica do teste, p-valor e outros resultados
        stat, pval, *_ = adfuller(x, autolag="AIC")
        # Retorna os resultados principais (estat√≠stica e p-valor) j√° convertidos para float
        return {"stat": float(stat), "pvalue": float(round(pval, 4))}
    except Exception as e:
        # Caso o teste d√™ erro (ex.: s√©rie muito curta), retorna NaN e o erro capturado
        return {"stat": np.nan, "pvalue": np.nan, "err": str(e)}

# Lista de indicadores econ√¥micos que ser√£o analisados no teste ADF
indicadores_focus = [
    "Infla√ß√£o (CPI, % a.a.)",
    "PIB real ‚Äî crescimento (% a.a.)",
    "Desemprego (% for√ßa de trabalho)",
    "Conta Corrente (% do PIB)",
    "Juros reais (% a.a.)"
]

# Loop para exibir os resultados do ADF em layout de 2 colunas no Streamlit
# Percorre a lista de indicadores de 2 em 2
for i in range(0, len(indicadores_focus), 2):
    # Cria duas colunas lado a lado
    cols = st.columns(2)
    # Itera sobre cada coluna preenchendo com um indicador (se existir)
    for j, col in enumerate(cols):
        if i + j < len(indicadores_focus):
            ind = indicadores_focus[i + j]  # Nome do indicador atual
            with col:  # Renderiza dentro da coluna correspondente
                # Verifica se o indicador est√° presente no DataFrame "dfm"
                if ind in dfm.columns:
                    # Executa o ADF na s√©rie do indicador
                    res = run_adf_show(dfm[ind])
                    # Caso o p-valor seja NaN (erro ou s√©rie inv√°lida)
                    if np.isnan(res["pvalue"]):
                        # Mostra estat√≠stica, p-valor e erro retornado pela fun√ß√£o
                        st.write({"stat": res["stat"], "pvalue": res["pvalue"], "err": res.get("err")})
                    else:
                        # Caso o teste rode normalmente, mostra resultados formatados
                        st.write(
                            {
                                "indicador": ind,  # Nome do indicador
                                "stat": round(res["stat"], 4),  # Estat√≠stica do teste ADF
                                "pvalue": round(res["pvalue"], 4),  # P-valor
                                # Interpreta√ß√£o pr√°tica: estacion√°ria se p < 0.05
                                "Resultado": "‚úÖ Estacion√°ria" if res["pvalue"] < 0.05 else "‚ùå N√£o estacion√°ria",
                            }
                        )
                else:
                    # Caso a coluna n√£o exista no CSV, mostra aviso
                    st.write(f"**{ind}** n√£o encontrado no CSV.")

# Linha divis√≥ria na p√°gina
st.markdown("---")

# Subt√≠tulo para indicar a se√ß√£o do teste ADF
st.subheader("üß™ Teste de Estacionariedade (ADF)")

# ========== Op√ß√£o de limpeza via BOT√ïES ==========
# Cria um t√≠tulo/legenda na tela para a se√ß√£o de "Limpeza de Dados"
st.markdown("### üßπ Op√ß√£o de limpeza de dados")

# Divide a tela em duas colunas (para os bot√µes de escolha)
left, right = st.columns(2)

# Cria uma vari√°vel de estado no Streamlit para guardar a escolha do usu√°rio
# "apply_cleaning" indica se a limpeza deve ser aplicada ou n√£o
if "apply_cleaning" not in st.session_state:
    st.session_state.apply_cleaning = False  # valor padr√£o = n√£o aplicar limpeza

# Coluna da esquerda ‚Üí op√ß√£o de N√ÉO aplicar limpeza
with left:
    if st.button("Usar **sem** limpeza (padr√£o)", use_container_width=True):
        # Se o usu√°rio clicar nesse bot√£o, atualiza a flag no session_state
        st.session_state.apply_cleaning = False

# Coluna da direita ‚Üí op√ß√£o de APLICAR limpeza
with right:
    if st.button("Aplicar **limpeza** agora", use_container_width=True):
        # Se o usu√°rio clicar nesse bot√£o, ativa a flag de limpeza
        st.session_state.apply_cleaning = True

    # Texto explicativo abaixo do bot√£o, em formato de legenda/caption
    st.caption(
        "üßπ **Limpeza:** tiro os anos totalmente at√≠picos que aconteceram entre 2000 e 2024 "
        "(ex.: 2008-2009 [crise global], 2020 [pandemia]) e removemos saltos ano-a-ano maiores que **3 p.p.** "
        "Por qu√™? Pra evitar que choques distor√ßam ADF/VAR/VECM e deixar as "
        "previs√µes mais est√°veis e f√°ceis de ler."
    )




# Fun√ß√£o para rodar o teste ADF (Augmented Dickey-Fuller)
def run_adf(x: pd.Series) -> dict:
    # Converte a s√©rie para num√©rico (caso venha com strings) e remove valores ausentes
    x = pd.to_numeric(x, errors="coerce").dropna()
    try:
        # Executa o teste ADF com:
        # - autolag="AIC": escolhe o n√∫mero √≥timo de defasagens usando crit√©rio AIC
        # - maxlag = m√≠nimo entre 8 e 1/3 do tamanho da s√©rie (evita sobreajuste em s√©ries curtas)
        stat, pval, *_ = adfuller(x, autolag="AIC", maxlag=min(8, int(len(x) / 3)))
        
        # Retorna estat√≠stica do teste e p-valor como floats
        return {"stat": float(stat), "pvalue": float(pval)}
    except Exception:
        # Caso o teste n√£o rode (ex.: s√©rie muito curta, problemas de dados),
        # retorna NaN para facilitar o tratamento na visualiza√ß√£o
        return {"stat": np.nan, "pvalue": np.nan}



# Fun√ß√£o simples de limpeza de dados
def simple_clean(df: pd.DataFrame, cols: list,
                 anos_excluir=(2008, 2009, 2020),  # anos fixos a remover (choques conhecidos)
                 pp_threshold: float = 3.0):       # limiar em pontos percentuais para detectar outliers
    # Cria c√≥pia do DataFrame para n√£o alterar o original
    base = df.copy()

    # Remove anos fixos pr√©-definidos (ex.: crise de 2008, 2009 e pandemia em 2020)
    anos_fix = [a for a in anos_excluir if a in set(base["year"])]
    if anos_fix:
        base = base[~base["year"].isin(anos_fix)]

    # Conjunto para armazenar anos detectados automaticamente como outliers
    anos_auto = set()

    # Seleciona apenas colunas relevantes (ano + vari√°veis de interesse),
    # ordena por ano e define "year" como √≠ndice
    tmp = base[["year"] + cols].dropna().sort_values("year").set_index("year")

    # Para cada vari√°vel, calcula a diferen√ßa ano a ano (‚àÜ)
    for c in cols:
        dif = tmp[c].diff()  # diferen√ßa em rela√ß√£o ao ano anterior
        # Se a varia√ß√£o absoluta for maior que o limite (pp_threshold),
        # marca o ano como outlier autom√°tico
        anos_auto.update(tmp.index[(dif.abs() > pp_threshold)].tolist())

    # Ordena a lista de anos outliers autom√°ticos
    anos_auto = sorted(list(anos_auto))

    # Remove os anos identificados automaticamente como outliers
    if anos_auto:
        base = base[~base["year"].isin(anos_auto)]

    # Retorna:
    # - base limpa
    # - anos removidos manualmente (anos_fix)
    # - anos removidos automaticamente (anos_auto)
    return base, anos_fix, anos_auto


# --------------------------------
# Fun√ß√£o principal (renderiza tudo)
# --------------------------------
def analyze_pair(df: pd.DataFrame, a: str, b: str, apply_cleaning: bool):
    # Valida√ß√£o: garante que as duas colunas (vari√°veis escolhidas) existem no DataFrame
    if a not in df.columns or b not in df.columns:
        st.warning(f"Colunas ausentes para {a} vs {b}."); return

    # Sele√ß√£o / Limpeza de dados
    if apply_cleaning:
        # Aplica limpeza simples:
        # - remove anos "fixos" (choques conhecidos, ex.: 2008/2009/2020)
        # - detecta e remove anos com saltos anuais > 3 p.p. nas colunas analisadas
        df_use, anos_fix, anos_auto = simple_clean(df, [a, b], anos_excluir=(2008, 2009, 2020), pp_threshold=3.0)
        # Se houve remo√ß√µes, prepara texto para informar no UI (caption/explica√ß√£o)
        if anos_fix or anos_auto:
            blocos = []
            if anos_fix: blocos.append(f"anos removidos: {anos_fix}")            # removidos manualmente (fixos)
            if anos_auto: blocos.append(f"outliers Œîp.p. > 3.0: {anos_auto}")    # removidos automaticamente (saltos)
    else:
        # Sem limpeza: usa a base original
        df_use = df.copy()

    # Monta par num√©rico (pr√©-processamento)
    # Seleciona ano + as duas s√©ries, ordena por ano, define √≠ndice = year
    tmp = (df_use[["year", a, b]].dropna().sort_values("year").set_index("year")).copy()
    # Garante que as s√©ries est√£o em formato num√©rico
    tmp[a] = pd.to_numeric(tmp[a], errors="coerce")
    tmp[b] = pd.to_numeric(tmp[b], errors="coerce")
    # Remove linhas com NaN ap√≥s coer√ß√µes e for√ßa dtype float
    tmp = tmp.dropna().astype(float)
    # Checagem de tamanho m√≠nimo: abaixo de 8 observa√ß√µes, o ajuste/forecast fica fr√°gil
    if tmp.empty or tmp.shape[0] < 8:
        st.warning(f"Dados insuficientes para {a} vs {b}."); return


    # Decis√£o por VECM (teste de cointegra√ß√£o de Johansen)

    vecm_ok = False
    try:
        # coint_johansen espera um array numpy; det_order=0: sem determin√≠stico em n√≠vel;
        # k_ar_diff=1: 1 defasagem nas diferen√ßas (config simples)
        cj = coint_johansen(tmp.values, det_order=0, k_ar_diff=1)
        # Regra pr√°tica: usa a estat√≠stica "trace" (lr1) e compara com cr√≠tico de 5% (cvt[:,1])
        # Se lr1[0] > cvt[0,1] => pelo menos 1 rela√ß√£o de cointegra√ß√£o (rank >= 1)
        vecm_ok = float(cj.lr1[0]) > float(cj.cvt[0, 1])  # trace > cr√≠tico 5%
    except Exception:
        # Se algo falhar no Johansen, cai para a rota VAR
        vecm_ok = False

    # Horizonte de previs√£o (anos √† frente)
    forecast_years = 3
    pred_df, modelo_usado = None, ""

    # ============
    #   VECM
    # ============
    if vecm_ok:
        # Cabe√ßalho para a se√ß√£o VECM
        st.subheader(f"üîπ VECM ‚Äî {a} vs {b}")
        # Mostra um "snippet" do c√≥digo usado, para transpar√™ncia pedag√≥gica
        with st.expander("üì¶ C√≥digo usado (VECM)", expanded=False):
            st.code(
                "model = VECM(df_pair, k_ar_diff=1, deterministic='ci')\n"
                "res = model.fit()\n"
                "fc = res.predict(steps=3)\n", language="python")
        try:
            # Ajuste do VECM:
            # - k_ar_diff=1: 1 defasagem nas diferen√ßas
            # - deterministic='ci': intercepto apenas no vetor de cointegra√ß√£o (forma comum)
            model = VECM(tmp, k_ar_diff=1, deterministic="ci")
            res = model.fit()
            # Previs√£o out-of-sample para N passos (anos)
            fc = res.predict(steps=forecast_years)

            # Constr√≥i √≠ndice futuro com base no √∫ltimo ano observado
            last_year = int(tmp.index.max())
            fut_years = list(range(last_year + 1, last_year + 1 + forecast_years))

            # DataFrame de previs√µes com mesmas colunas e index dos anos futuros
            pred_df = pd.DataFrame(fc, columns=tmp.columns, index=fut_years).astype(float)
            modelo_usado = "VECM"
        except Exception as e:
            # Em caso de erro no ajuste/predict do VECM, informa e habilita fallback para VAR
            st.error(f"Erro no VECM: {e}")
            vecm_ok = False

    # ============
    #   VAR
    # ============
    if not vecm_ok:
        # Cabe√ßalho para a se√ß√£o VAR (rota padr√£o se n√£o houver cointegra√ß√£o)
        st.subheader(f"üîπ VAR ‚Äî {a} vs {b}")
        # Mostra um "snippet" do c√≥digo usado, para transpar√™ncia pedag√≥gica
        with st.expander("üì¶ C√≥digo usado (VAR)", expanded=False):
            st.code(
                "sel = VAR(X).select_order(4)\n"
                "p = sel.aic or 1\n"
                "model = VAR(X).fit(p)\n"
                "fc = model.forecast(model.endog[-p:], steps=3)\n", language="python")
        try:
            X = tmp.copy()
            # Estrat√©gia: diferenciar vari√°veis individualmente apenas se o ADF indicar n√£o-estacionariedade
            diffed = {}
            for col in X.columns:
                adf = run_adf(X[col])  # roda ADF coluna a coluna
                # need_diff=True se p-valor >= 0.05 (n√£o rejeita raiz unit√°ria)
                need_diff = (not np.isnan(adf["pvalue"])) and (adf["pvalue"] >= 0.05)
                diffed[col] = bool(need_diff)
                # Aplica a primeira diferen√ßa apenas na(s) s√©rie(s) n√£o estacion√°ria(s)
                if need_diff: X[col] = X[col].diff()

            # Remove linhas iniciais perdidas pela diferen√ßa e garante float
            X = X.dropna().astype(float)
            # Checagem de tamanho m√≠nimo de amostra ap√≥s diferencia√ß√£o
            if X.shape[0] < 8:
                st.warning("Amostra ficou curta ap√≥s a diferencia√ß√£o."); return

            # Define p m√°ximo com bom senso: n√£o exagerar em s√©ries curtas
            max_p = min(4, max(1, X.shape[0] - 2))
            try:
                # Seleciona ordem via crit√©rio AIC at√© p m√°ximo
                sel = VAR(X).select_order(max_p)
                # Alguns objetos retornam p diretamente em sel.aic; se None, usa 1
                p = int(sel.aic) if sel.aic is not None else 1
            except Exception:
                # Se falhar a sele√ß√£o de ordem, usa p=1
                p = 1
            # Garante que p est√° no intervalo [1, max_p]
            p = max(1, min(max_p, int(p)))

            # Ajusta o VAR com p defasagens
            model = VAR(X).fit(p)

            # Forecast para N passos √† frente, usando as √∫ltimas p observa√ß√µes
            fc = model.forecast(y=X.values[-model.k_ar:], steps=forecast_years)
            fc_df = pd.DataFrame(fc, columns=X.columns)

            # Reconstr√≥i n√≠veis para as s√©ries que foram diferenciadas
            last_year = int(tmp.index.max())
            fut_years = list(range(last_year + 1, last_year + 1 + forecast_years))
            pred_df = pd.DataFrame(index=fut_years, columns=tmp.columns, dtype=float)
            for col in tmp.columns:
                if diffed.get(col, False):
                    # Se a s√©rie foi diferenciada: soma cumulativa √†s previs√µes + √∫ltimo n√≠vel observado
                    base = float(tmp[col].iloc[-1])
                    pred_df[col] = base + fc_df[col].cumsum().values
                else:
                    # Se n√£o foi diferenciada: previs√£o j√° est√° em n√≠vel
                    pred_df[col] = fc_df[col].values

            # Fallback anti-NaN:
            # Em caso raro de NaN nas previs√µes (por num√©rico/colinearidade),
            # tenta refitar com p=1 e refaz reconstru√ß√£o
            if pred_df.isna().any().any():
                model = VAR(X).fit(1)
                fc = model.forecast(y=X.values[-1:], steps=forecast_years)
                fc_df = pd.DataFrame(fc, columns=X.columns)
                for col in tmp.columns:
                    if diffed.get(col, False):
                        base = float(tmp[col].iloc[-1])
                        pred_df[col] = base + fc_df[col].cumsum().values
                    else:
                        pred_df[col] = fc_df[col].values

        except Exception as e:
            # Qualquer erro no pipeline VAR: informa e encerra
            st.error(f"Erro no VAR: {e}"); return


    # ---------- Plot + Conclus√£o ----------
    # Se por algum motivo n√£o foi poss√≠vel gerar o DataFrame de previs√£o, avisa e encerra
    if pred_df is None or pred_df.empty:
        st.warning("Sem forecast gerado."); return
    
    # Mant√©m somente os √∫ltimos 5 anos antes do forecast no hist√≥rico
    x_sep = int(tmp.index.max())  # √∫ltimo ano observado
    hist_start = max(tmp.index.min(), x_sep - 4)  # pega at√© 5 anos antes
    tmp_plot = tmp.loc[hist_start:]  # subset do hist√≥rico para plotagem

    # Cria a figura Plotly para visualizar hist√≥rico e previs√µes
    fig = go.Figure()

    # S√©rie A (hist√≥rico): linhas + marcadores ao longo dos anos observados
    fig.add_trace(go.Scatter(x=tmp_plot.index, y=tmp_plot[a], mode="lines+markers", name=f"{a} ‚Äî hist√≥rico"))

    # S√©rie B (hist√≥rico): linhas + marcadores ao longo dos anos observados
    fig.add_trace(go.Scatter(x=tmp_plot.index, y=tmp_plot[b], mode="lines+markers", name=f"{b} ‚Äî hist√≥rico"))

    # S√©rie A (previs√£o): linhas + marcadores nos anos futuros; linha tracejada para diferenciar do hist√≥rico
    fig.add_trace(go.Scatter(x=pred_df.index, y=pred_df[a], mode="lines+markers",
                             name=f"{a} ‚Äî previs√£o ({modelo_usado})", line=dict(dash="dash")))

    # S√©rie B (previs√£o): idem acima, com estilo tracejado
    fig.add_trace(go.Scatter(x=pred_df.index, y=pred_df[b], mode="lines+markers",
                             name=f"{b} ‚Äî previs√£o ({modelo_usado})", line=dict(dash="dash")))

    # Linha vertical separando o √∫ltimo ano hist√≥rico do in√≠cio do forecast (ajuda visual)
    x_sep = int(tmp_plot.index.max())
    fig.add_vline(x=x_sep, line_width=1, line_dash="dash")

    # Anota√ß√£o textual no topo do gr√°fico para indicar o ponto de in√≠cio da previs√£o
    fig.add_annotation(x=x_sep, yref="paper", y=1.05, showarrow=False, text="In√≠cio do forecast")

    # Layout do gr√°fico: t√≠tulo centralizado, r√≥tulos de eixos, legenda horizontal e margens
    fig.update_layout(title={"text": f"Evolu√ß√£o + previs√£o ({modelo_usado}) ‚Äî {a} & {b}", "x": 0.5},
                      xaxis_title="Ano", yaxis_title="Valor (%)",
                      legend=dict(orientation="h", y=1.02, x=0),
                      margin=dict(t=80, b=40, l=40, r=20))

    y_min = min(tmp_plot[a].min(), tmp_plot[b].min(), pred_df[a].min(), pred_df[b].min())
    y_max = max(tmp_plot[a].max(), tmp_plot[b].max(), pred_df[a].max(), pred_df[b].max())
    y_range = [y_min - (abs(y_min) * 0.1), y_max + (abs(y_max) * 0.1)]

    fig.update_yaxes(tickformat=".2f", range=y_range)

    # Renderiza o gr√°fico no Streamlit ocupando toda a largura do container
    st.plotly_chart(fig, use_container_width=True)

    # ---------------------------------------------------------
    # Conclus√£o textual (resumo) com base no √∫ltimo ponto previsto vs √∫ltimo hist√≥rico
    # ---------------------------------------------------------
    try:
        # √öltimo valor hist√≥rico e √∫ltima proje√ß√£o para a s√©rie 'a'
        last_hist = float(tmp[a].iloc[-1]); last_fore = float(pred_df[a].iloc[-1])

        # Apenas se a proje√ß√£o √© um n√∫mero finito (evita NaN/inf)
        if np.isfinite(last_fore):
            # Varia√ß√£o prevista entre o fim do hist√≥rico e o √∫ltimo ano projetado
            delta = last_fore - last_hist

            # Dire√ß√£o qualitativa: alta, queda ou est√°vel
            direcao = "‚Üë alta" if delta > 0 else ("‚Üì queda" if delta < 0 else "‚Üí est√°vel")

            # Mensagem amig√°vel com valores formatados e horizonte em anos
            st.success(f"**Conclus√£o ({a})**: de {last_hist:.2f}% para {last_fore:.2f}% ‚Üí {direcao} nos pr√≥ximos {forecast_years} anos ({modelo_usado}).")
        else:
            # Caso a √∫ltima previs√£o esteja inv√°lida
            st.warning("A √∫ltima proje√ß√£o veio NaN.")
    except Exception:
        # Se algo falhar no c√°lculo/formata√ß√£o, apenas ignora silenciosamente (n√£o quebra a UI)
        pass


# Chama a fun√ß√£o principal para pares de vari√°veis de interesse,
# usando a flag de limpeza definida anteriormente no session_state
analyze_pair(dfm, "PIB real ‚Äî crescimento (% a.a.)", "Desemprego (% for√ßa de trabalho)", st.session_state.apply_cleaning)
analyze_pair(dfm, "Infla√ß√£o (CPI, % a.a.)", "Juros reais (% a.a.)", st.session_state.apply_cleaning)
analyze_pair(dfm, "Conta Corrente (% do PIB)", "PIB real ‚Äî crescimento (% a.a.)", st.session_state.apply_cleaning)
